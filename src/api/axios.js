// src/api/axios.js
import axios from "axios";
import { jwtDecode } from "jwt-decode"; // ---> 1. Import jwt-decode (c√†i ƒë·∫∑t: npm install jwt-decode)

import axiosRetry from "axios-retry"; // Th√™m axios-retry ƒë·ªÉ t·ª± ƒë·ªông retry request khi g·∫∑p l·ªói m·∫°ng

// ---> 2. S·ª≠ d·ª•ng bi·∫øn m√¥i tr∆∞·ªùng cho BASE_URL
const BASE_URL =
  process.env.REACT_APP_BACKEND_API_URL || "http://localhost:9090/api";
// T·∫°o file .env ·ªü th∆∞ m·ª•c g·ªëc project n·∫øu ch∆∞a c√≥ v√† th√™m d√≤ng:
// REACT_APP_BACKEND_API_URL=http://localhost:9090/api
// Ho·∫∑c thay b·∫±ng URL backend th·ª±c t·∫ø c·ªßa b·∫°n khi deploy

// üëâ Instance ch√≠nh: d√πng sau khi ƒëƒÉng nh·∫≠p (c√≥ token)
const api = axios.create({
  baseURL: BASE_URL,
  timeout: 5000, // Th·ªùi gian timeout 5 gi√¢y TimeLimiter
  headers: {
    "Content-Type": "application/json",
  },
});

// c·∫•u h√¨nh retry ngay sau khi t·∫°o instance
// Retry: t·ª± ƒë·ªông th·ª≠ l·∫°i 2 l·∫ßn n·∫øu g·∫∑p l·ªói m·∫°ng ho·∫∑c 5xx TimeLimiter
axiosRetry(api, {
  retries: 2,
  retryDelay: axiosRetry.exponentialDelay,
  retryCondition: (err) =>
    axiosRetry.isNetworkError(err) || err.response?.status >= 500,
});

// Request Interceptor: T·ª± ƒë·ªông th√™m token v√†o header (Gi·ªØ nguy√™n)
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem("token");
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log(
        "‚úÖ Authorization set in header:",
        config.headers.Authorization
      );
    } else {
      console.warn("‚ùå Kh√¥ng c√≥ token trong localStorage");
    }
    console.log("‚û°Ô∏è Request b·∫Øt ƒë·∫ßu:", config.url);
    return config;
  },
  (error) => Promise.reject(error)
);

// ---> 3. Th√™m Response Interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói chung
api.interceptors.response.use(
  (response) => {
    // Log response th√†nh c√¥ng n·∫øu c·∫ßn debug
    console.log("API Response:", response);
    return response; // Tr·∫£ v·ªÅ response n·∫øu th√†nh c√¥ng
  },
  (error) => {
    console.error("API Error:", error.response || error.message); // Log l·ªói chi ti·∫øt h∆°n

    // X·ª≠ l√Ω l·ªói 401 (Unauthorized) - Token kh√¥ng h·ª£p l·ªá/h·∫øt h·∫°n
    if (error.response && error.response.status === 401) {
      console.warn(
        "Unauthorized (401). Token might be invalid or expired. Logging out."
      );
      // X√≥a token v√† role kh·ªèi localStorage
      localStorage.removeItem("token");
      localStorage.removeItem("role");
      // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang ƒëƒÉng nh·∫≠p
      // D√πng window.location.href ƒë·ªÉ ƒë·∫£m b·∫£o reload ho√†n to√†n, x√≥a state c≈©
      if (window.location.pathname !== "/login") {
        // Tr√°nh reload v√≤ng l·∫∑p n·∫øu ƒëang ·ªü trang login
        window.location.href = "/login";
        // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o cho ng∆∞·ªùi d√πng tr∆∞·ªõc khi chuy·ªÉn h∆∞·ªõng
        alert(
          "Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n ho·∫∑c kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i."
        );
      }
    }

    // X·ª≠ l√Ω c√°c l·ªói kh√°c n·∫øu c·∫ßn (v√≠ d·ª•: 403 Forbidden, 500 Server Error)
    // if (error.response && error.response.status === 403) {
    //   console.warn("Forbidden (403). User does not have permission.");
    //   // C√≥ th·ªÉ hi·ªÉn th·ªã th√¥ng b√°o kh√¥ng c√≥ quy·ªÅn
    // }

    // Quan tr·ªçng: Reject promise ƒë·ªÉ component g·ªçi API bi·∫øt l√† ƒë√£ c√≥ l·ªói x·∫£y ra
    return Promise.reject(error);
  }
);

// üëâ Instance publicApi: d√πng cho login, register (Gi·ªØ nguy√™n)
const publicApi = axios.create({
  baseURL: BASE_URL,
  headers: {
    "Content-Type": "application/json",
  },
});

// ---> 4. Th√™m h√†m ti·ªán √≠ch ƒë·ªÉ l·∫•y th√¥ng tin t·ª´ Token
/**
 * Gi·∫£i m√£ JWT token t·ª´ localStorage v√† tr·∫£ v·ªÅ th√¥ng tin user.
 * @returns {object|null} Object ch·ª©a th√¥ng tin user (v√≠ d·ª•: { username, role }) ho·∫∑c null n·∫øu kh√¥ng c√≥ token ho·∫∑c l·ªói.
 */
export const getUserInfoFromToken = () => {
  const token = localStorage.getItem("token");
  if (!token) {
    console.log("No token found in localStorage.");
    return null;
  }
  try {
    const decoded = jwtDecode(token);
    // Log ƒë·ªÉ ki·ªÉm tra n·ªôi dung token ƒë∆∞·ª£c gi·∫£i m√£
    // console.log("Decoded Token:", decoded);

    // Gi·∫£ s·ª≠ token c·ªßa b·∫°n ch·ª©a username trong tr∆∞·ªùng 'sub' (subject)
    // v√† role trong tr∆∞·ªùng 'roles' (l√† m·ªôt m·∫£ng)
    const userInfo = {
      username: decoded.sub, // 'sub' th∆∞·ªùng ch·ª©a username ho·∫∑c ID
      // L·∫•y role ƒë·∫ßu ti√™n t·ª´ m·∫£ng roles (n·∫øu c√≥)
      role:
        Array.isArray(decoded.roles) && decoded.roles.length > 0
          ? decoded.roles[0]
          : null,
      // B·∫°n c√≥ th·ªÉ th√™m c√°c tr∆∞·ªùng kh√°c t·ª´ token n·∫øu c·∫ßn
      // iat: decoded.iat, // Issued at
      // exp: decoded.exp, // Expiration time
    };

    // Ki·ªÉm tra xem token ƒë√£ h·∫øt h·∫°n ch∆∞a ph√≠a client (d√π server v√† interceptor ƒë√£ ki·ªÉm tra)
    const currentTime = Date.now() / 1000; // ƒë·ªïi sang gi√¢y
    if (decoded.exp && decoded.exp < currentTime) {
      console.warn("Token has expired (client-side check).");
      // C√≥ th·ªÉ th·ª±c hi·ªán logout ·ªü ƒë√¢y n·∫øu c·∫ßn thi·∫øt, d√π interceptor s·∫Ω x·ª≠ l√Ω khi g·ªçi API ti·∫øp theo
      // localStorage.removeItem("token");
      // localStorage.removeItem("role");
      // window.location.href = '/login';
      return null; // Coi nh∆∞ kh√¥ng c√≥ user info h·ª£p l·ªá
    }

    console.log("User info from token:", userInfo);
    return userInfo;
  } catch (error) {
    console.error("Error decoding token:", error);
    // Token kh√¥ng h·ª£p l·ªá -> X√≥a token c≈© v√† logout
    localStorage.removeItem("token");
    localStorage.removeItem("role");
    if (window.location.pathname !== "/login") {
      // window.location.href = '/login'; // C√¢n nh·∫Øc vi·ªác t·ª± ƒë·ªông redirect ·ªü ƒë√¢y
    }
    return null;
  }
};

export { api, publicApi }; // Gi·ªØ nguy√™n export
